package org.questlab.motter.mof;


import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.InputStream;
import java.net.URL;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import org.eclipse.m2m.atl.drivers.emf4atl.AtlEMFModelHandler; 
import org.eclipse.m2m.atl.engine.vm.ASMStackFrame;
import org.eclipse.m2m.atl.engine.vm.AtlLauncher;
import org.eclipse.m2m.atl.engine.vm.AtlModelHandler;
import org.eclipse.m2m.atl.engine.vm.Debugger;
import org.eclipse.m2m.atl.engine.vm.ModelLoader;
import org.eclipse.m2m.atl.engine.vm.StackFrame;
import org.eclipse.m2m.atl.engine.vm.nativelib.ASMModel;

import questlab.motter.CFG.CFG;
import questlab.motter.CFG.CFGATLDriverNew;
import questlab.motter.CFG.Condition;
import questlab.motter.CFG.DecisionNode;
import questlab.motter.CFG.Node;
import questlab.motter.CFG.conditionMap;
import questlab.motter.atl.parser.Generator;
import questlab.motter.mofscript.CFG.MOFMain;
import simula.embt.simulator.CaseSpecificInputsReader;
import simula.embt.simulator.MofscriptParser;
import simula.embt.simulator.driver.MofScriptDriver;
import snt.oclsolver.distance.ClassDiagramTestData;
import snt.oclsolver.driver.SolverRunner;
import snt.oclsolver.reader.ObjScriptGenerator;
import snt.oclsolver.search.SearchAlgorithmEnum;
import snt.oclsolver.tuples.ClassifierTuple;
public class MOFTransformationLaunch {
    
	private ArrayList<String> logs = new ArrayList<String>();
	
    public static void main(String[] args) {
    	try {

    		String umlFile="OCLSolverInput/StateMachineMetaModel.uml";		        	
    		ClassDiagramTestData.getInstance().reset(umlFile);
    		
  		  String query =
			"Package.allInstances()->select(p|p.name='pkg')->size() = 1"
		    + " and Class.allInstances()->forAll(c|c.isActive=true and c.ownedBehavior->forAll(b|b.oclIsTypeOf(Behavior) and c.ownedAttribute->forAll(a|a.name='aName' and a.visibility=VisibilityKind::public and a.oclIsTypeOf(Type))))->size() > 0" 
			+ " and StateMachine.allInstances()->forAll(s|s.region->select(r|r.name='sm')->size()>0)"
			+ " and Transition.allInstances()->forAll(t| t.kind=TransitionKind::external and t.source.oclIsKindOf(Vertex) and t.target.oclIsKindOf(Vertex))"
			+ " and Transition.allInstances()->forAll(t| t.effect.name='eff' and t.effect.Body='bd' and t.effect.language='lan')"
			+ " and SignalEvent.allInstances()->select(s| s.name='sigEvt')->size()=1"
			+ " and Signal.allInstances()->select(s| s.name='sig')->size()=1"
			+ " and TimeEvent.allInstances()->select(t| t.name='tEvt' and t.isRelative=true and t.when.expr.oclIsKindOf(ValueSpecification))->size()<2"
			+ " and Class.allInstances()->forAll(c|c.ownedOperation->forAll(o|o.name='op'))"
			+ " and Class.allInstances()->forAll(c|c.ownedReception->forAll(r|r.signal.name='rep'))"
			;
			    		
    		String objDiagramPath="OCLSolverOutput";
    		String objDiagramFileName=objDiagramPath+"/OCLOutput.xmi";
    		int noOfIterations=100;
    		int noOfRuns=1;
    		
    			ObjScriptGenerator driver =  new ObjScriptGenerator(umlFile);
    			driver.generateScript();
    			
    			SolverRunner exp = new SolverRunner();	
    			exp.setNoOfRuns(noOfRuns);
    			exp.setObjDiagramPath(objDiagramPath);
    			exp.setIndividualType("simple");
    			ArrayList<ClassifierTuple> result = exp.getValues(query.trim(), noOfIterations,SearchAlgorithmEnum.AVM);

//    			CreateSaveTester s=new CreateSaveTester();
//    			s.retrieveTupple(result);
//    			s.generateXmiObjectDiagram(objDiagramFileName);
    			
    			MOFTransformationLaunch launch= new MOFTransformationLaunch();
        		String InputModel=objDiagramFileName;
        		
        		launch.executeMOF();
        		launch.printCFG(launch.executeTransformation(InputModel));
            	launch.CalculateFitness(launch.executeTransformation(InputModel));
  	
    	}
    	catch (Exception e) {
    		e.printStackTrace();
    	}
    }
    
    private void executeMOF(){
    	
    	
    	System.setProperty(CaseSpecificInputsReader.PROPERTY_FILE_NAME_PROPERTY, "booting_new/booting_new-user-config.properties");
		System.setProperty(MofscriptParser.TRANSFORMATION_DIR_PROPERTY, "../VERDE_SimulatorGenerator");
		
		try {
			MofScriptDriver.main(null);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	
    }  
    
    private String removeSpaces(String line){
    	String l = "";
    	for(int i=1; i<line.length(); i+=2){
    		l += line.charAt(i);
    	}
    	return l;
    }
	
	public HashMap<String, conditionMap> executeTransformation(String InputModel) {
		
		System.out.println("\n MOTTER Execution Started");
				  try
				  {
		
		    BufferedReader br = new BufferedReader(new FileReader("OCLSolverOutput/MOFLogFile.txt"));		    try {
		    	
		        String line = null;
                              
		        while (( line = br.readLine() ) != null) {
		        	//System.out.println(line);
		        	line = removeSpaces(line);
		        	//System.out.println(line);
		        	String part[] = line.split("#");
		        	if(part.length>2){
		        	String number=part[0];
		    		String temp=part[1];
		    		temp = number + "#" + temp;
		    		//System.out.println(temp);
		    		if (!logs.contains(temp)) {
	    				logs.add(temp);
	    		}
		        	}
		        	//line = br.readLine();
		    		
		        }
		        
		    } finally {
		        br.close();
		    } 
		    
		    
                     
		
    	for(int l=0; l<logs.size(); l++){
    		//System.out.println((l+1)+": "+logs.get(l));
    		//System.out.println(logs.+": "+logs.get(l));
    	}
				  }
				  catch (Exception e){
					  e.printStackTrace();
				  }
		HashMap<String, conditionMap> nodeIds=cfgCompare();
		return nodeIds;
	}
	   
    public void printCFG(HashMap<String, conditionMap> nodeIds){
    	System.out.println("\nCGF Traversal of the Input Model  : \n");
    	int l=1;
    	for (String key : nodeIds.keySet()) {
    		System.out.print((l++)+": ");
    		conditionMap c=nodeIds.get(key);
    		c.print();
    	}
    }
    
    public ArrayList<String> printParentTree(String key,HashMap<String, conditionMap> conditionStatements){
        ArrayList<String> pList=new ArrayList<String>();
        CFG TP=MOFMain.mainMethod();
			Node n = TP.BFS(key,1);
			
	//		TP.reInitializeIsVisisted(TP.getRootNode());
			conditionMap c=conditionStatements.get(key);
		if(c.getConditionStatus()!=true){
        if(getParentDecisionNode(n)==null){
        	pList.add("  ");
        }
        else{
        	pList.add(" -> "+getParentDecisionNode(n).getNodeId().split("#")[1].split(":")[0].toString());
            pList.addAll(printParentTree(getParentDecisionNode(n).getNodeId().split("#")[1].split(":")[0].toString(),conditionStatements));
        
        }
		}
		
			
    	return pList;
    }
    
    
    public  double calculateApproachLevel(String key,HashMap<String, conditionMap> conditionStatements ){
    	double appLevel=0.0;
    	conditionMap c=conditionStatements.get(key);
    	 if (!c.getParentConditionNode().equals("null")){
            // appLevel=1.0;
    		 if(conditionStatements.get(c.getParentConditionNode()).getConditionStatus()== false){
    			 appLevel=calculateApproachLevel(c.getParentConditionNode(), conditionStatements);
        		 appLevel++; 
    		 }
    	 }
    	return appLevel;
    }
    
    public  double CalculateFitness(HashMap<String, conditionMap> conditionStatements){
    	double approach=0.0;
    	for (String key : conditionStatements.keySet()) {
    		conditionMap c=conditionStatements.get(key);
    		if(!c.getConditionStatus()){ // find target nodes which are not yet covered
    			approach=calculateApproachLevel(key, conditionStatements);
    			System.out.print("App-Level of "+key+"  = "+approach+"  :  ");
    			for(String u : printParentTree(key,conditionStatements)){
    				System.out.print( u );	
    			}
    			System.out.print("\n");
    			}
    		}    	
    	return approach;
    }
    
    public  String clearName(String name){
    	if(name.contains("__match")){
    		return name.replace("__match", "");
    	}else if(name.contains("__init")){
    		return name.replace("__init", "");
    	}else if(name.contains("__apply")){
    		return name.replace("__apply", "");
    	}
    	return name;
    }
    
    public  Node getParentDecisionNode(Node n){
    	Node PNode=new Node();
    	n=n.getParentNode();
    	if(n.getParentNode()!=null){
    	
    	if(n.getNodeId().contains(":")){///specific node DecisionNode or Comp
			//String nodeNumber=n.getNodeId().split(":")[0].split("#")[1];
			if(n.getNodeId().split(":")[1].endsWith("DecisionNode"))
				PNode =n;
			else
				PNode=getParentDecisionNode(n);
			}
    	else{
    		PNode=getParentDecisionNode(n);
    	}
		return PNode;
    	}
    	return null;
    }
    
    public  HashMap<String, conditionMap> cfgCompare(){
    	//CFGATLDriverNew d=new CFGATLDriverNew();
		CFG TP=MOFMain.mainMethod();
		ArrayList<String> nodeIds = new ArrayList<String>();
		for(int l=0; l<logs.size(); l++){
    		//System.out.println((l+1)+": "+logs.get(l));
    		Node n = TP.BFS(logs.get(l));
    		if(n != null){
    			//System.out.println(logs.get(l)+" GOESTO "+n.getAtlCode());
    			//if(nodeIds.contains(n.getNodeId()))
    			if(nodeIds.size() != 0){
    				//String s=nodeIds.get((nodeIds.size() - 1));
    				//String ss=n.getNodeId();
    				if(!nodeIds.get((nodeIds.size() - 1)).equals(n.getNodeId()))
    					nodeIds.add(n.getNodeId());
    			}else
    				nodeIds.add(n.getNodeId());
    			//System.out.println("Found-"+(l+1)+": "+logs.get(l));
    		}
    		//else {
  			//System.out.println("NotFound: "+(l+1)+": "+logs.get(l));//not found
    		//System.out.println("NotFound "+logs.get(l));//not found
    		TP.reInitializeIsVisisted(TP.getRootNode());//}
		}
		 
		HashMap<String, conditionMap> conList=new HashMap<String, conditionMap>();//=new ArrayList<>();
		for(int l=0; l<nodeIds.size(); l++){
		//	System.out.println((l+1)+": "+nodeIds.get(l));
			Node n = TP.BFS(nodeIds.get(l), true);
			//System.out.println(n.getNodeId()+" ****** "+n.getAtlCode()+"\n");  //visitedNode
			conditionMap cm1=new conditionMap();
			//ArrayList<conditionMap> conList;
			//if(n!=null)
			if(n.getNodeId().contains(":")){///specific node DecisionNode or Comp
				String nodeNumber=n.getNodeId().split(":")[0].split("#")[1];
				  
				if(n.getNodeId().split(":")[1].endsWith("DecisionNode")){
					DecisionNode ddec=(DecisionNode)n;
					Condition cond=ddec.getcondition();
					String decStatement=cond.getDecstatement();
					Node pNode=getParentDecisionNode(n);
					cm1.setDecNode(n);
					cm1.setConditionNodeNumber(nodeNumber);
					cm1.setConditionValue(decStatement);
					cm1.setApproachLevel(0);
					if(pNode!=null){
					cm1.setParentConditionNode(pNode.getNodeId().split(":")[0].split("#")[1]);
					cm1.setParentCondition(pNode);
					}
					else{
						cm1.setParentConditionNode("null");
						cm1.setParentCondition(new Node("null", ""));
					}	
					conList.put(nodeNumber,cm1);
				}
				if(n.getNodeId().split(":")[1].endsWith("then")){
					conditionMap thcon=conList.get(n.getNodeId().split(":")[2]);
					if(thcon!=null){
						String thenNode=n.getNodeId().split(":")[0].split("#")[1];
						thcon.setConditionStatus(true);
						thcon.setThenNodeNumber(thenNode);
						thcon.setNodeThen(n);
						conList.put(n.getNodeId().split(":")[2], thcon);
					}
					
				}
				if(n.getNodeId().split(":")[1].endsWith("else")){
					conditionMap thcon=conList.get(n.getNodeId().split(":")[2]);
					if(thcon!=null){
						String elseNode=n.getNodeId().split(":")[0].split("#")[1];
						thcon.setConditionStatus(false);
						thcon.setElseNodeNumber(elseNode);
						thcon.setNodeElse(n);
						conList.put(n.getNodeId().split(":")[2], thcon);
					}
				}				
			}
			//conList.add(cm1);
			TP.reInitializeIsVisisted(TP.getRootNode());
    	}
		return conList;
    }
   
}

