package org.questlab.motter.atl;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;
import org.eclipse.uml2.uml.EnumerationLiteral;

import snt.oclsolver.datatypes.EnumerationValueTuple;
import snt.oclsolver.datatypes.PrimitiveValueTuple;
import snt.oclsolver.tuples.ClassifierTuple;
import snt.oclsolver.tuples.ClassifierValueTuple;
import snt.oclsolver.tuples.IPropertyTuple;
import snt.oclsolver.tuples.ValueTuple;
import SimpleClass.*;
import SimpleClass.Class;


public class CreateSaveTester {

	
	public ArrayList<List<Object>> QueryTuppleMap;
/**
   * @param args
   */

  public static void main(String[] args) {
	    // Initialize the model
	  
		  SimpleClassPackage.eINSTANCE.eClass();
	    // Retrieve the default factory singleton
	    SimpleClassFactory factory = SimpleClassFactory.eINSTANCE;

	    // create the content of the model by creating classes
	    
	    Class c1 = factory.createClass();
	    c1.setName("Student");
	    c1.setIs_persistent(true);
	   
	    //Adding primitive Types
	    PrimitiveDataType integerPrimitive = factory.createPrimitiveDataType();
	    integerPrimitive.setName("Integer");
	    PrimitiveDataType StringPrimitive = factory.createPrimitiveDataType();
	    StringPrimitive.setName("String");
	   
	    //Adding Attributes   
	    Attribute a1=factory.createAttribute();
	    a1.setName("Name");
	    a1.setIs_primary(true);
	    a1.setType(StringPrimitive);
	    
	    
	    Attribute a2=factory.createAttribute();
	    a2.setName("Address");
	    a2.setIs_primary(true);
	    a2.setType(integerPrimitive);
	    c1.getAttrs().add(a1);
	    c1.getAttrs().add(a2);
	    
	    Class c2 = factory.createClass();
	    c2.setName("Human");
	    c2.setIs_persistent(true);
	    c2.getAttrs().add(a1);
	    
	    c1.setParent(c2);
	    // As of here we preparing to save the model content

	    Resource.Factory.Registry reg = Resource.Factory.Registry.INSTANCE;
	    Map<String, Object> m = reg.getExtensionToFactoryMap();
	    m.put("xmi", new XMIResourceFactoryImpl());

	    // Obtain a new resource set
	    ResourceSet resSet = new ResourceSetImpl();

	    // create a resource
	    Resource resource = resSet.createResource(URI
	       .createURI("../ATLExecutor/OCLSolverOutput/My2.xmi"));
	    // Get the first model element and cast it to the right type, in my
	    // example everything is hierarchical included in this first node
	    resource.getContents().add(c1);
	    resource.getContents().add(c2);
	    resource.getContents().add(StringPrimitive);
	    resource.getContents().add(integerPrimitive);
	    

	    // now save the content.
	    try {
	      resource.save(Collections.EMPTY_MAP);
	    } catch (IOException e) {
	      // TODO Auto-generated catch block
	      e.printStackTrace();
	    }
  }
  public void generateXmiObjectDiagram(String fileName){
	    
	 // fileName="../ATLExecutor/OCLSolverOutput/My2.xmi";
	    // Initialize the model
	  	  SimpleClassPackage.eINSTANCE.eClass();
	    // Retrieve the default factory singleton
	    SimpleClassFactory factory = SimpleClassFactory.eINSTANCE;
	    // As of here we preparing to save the model content
	    Resource.Factory.Registry reg = Resource.Factory.Registry.INSTANCE;
	    Map<String, Object> m = reg.getExtensionToFactoryMap();
	    m.put("xmi", new XMIResourceFactoryImpl());

	    // Obtain a new resource set
	    ResourceSet resSet = new ResourceSetImpl();

	    // create a resource
	    Resource resource = resSet.createResource(URI
	       .createURI(fileName));
	   
	  //Adding primitive Types
	    PrimitiveDataType integerPrimitive = factory.createPrimitiveDataType();
	    integerPrimitive.setName("Integer");
	    PrimitiveDataType stringPrimitive = factory.createPrimitiveDataType();
	    stringPrimitive.setName("String");
	    PrimitiveDataType booleanPrimitive = factory.createPrimitiveDataType();
	    booleanPrimitive.setName("Boolean");
	    HashMap<String,Object> resourcesToAdd=new HashMap<String, Object>();
	    HashMap<String,List<Object>> resourcesListToAdd=new HashMap<String, List<Object>>();
	    HashMap<String,Boolean> shouldResourcesAdd=new HashMap<String, Boolean>() ;
	    
	    for (List<Object> values : QueryTuppleMap)  {
           	if (values.get(0).toString().equals("Class")){
            		Class c1 = factory.createClass();
            	    c1.setName(values.get(1).toString()); 
            	    if (values.get(3).toString().equals("is_persistent"))
            	    	c1.setIs_persistent((Boolean)values.get(4));
            	    resourcesToAdd.put(values.get(1).toString(), c1);
            	    resourcesListToAdd.put(values.get(1).toString(), values);
            	    shouldResourcesAdd.put(values.get(1).toString(), false);
            	    //c1.setParent(value);
            	}
            	if (values.get(0).toString().equals("Association")){
            		Association a1 = factory.createAssociation();
            	    a1.setName(values.get(1).toString()); 
            	    resourcesToAdd.put(values.get(1).toString(), a1);
            	    resourcesListToAdd.put(values.get(1).toString(), values);
            	    shouldResourcesAdd.put(values.get(1).toString(), false);
            	    //a1.setDest(value);
            	    //a1.setSrc(value);
            	}
            	if (values.get(0).toString().equals("Attribute")){
            		Attribute at1 = factory.createAttribute();
            	    at1.setName(values.get(1).toString());
            	    if (values.get(3).toString().equals("is_primary"))
            	    	at1.setIs_primary((Boolean)values.get(4));
         //   	    if (values.get(3).toString().equals("type"))
         //   	    	at1.setType((Classifier)values.get(4));
            	    
            	    
            	    resourcesToAdd.put(values.get(1).toString(), at1);
            	    resourcesListToAdd.put(values.get(1).toString(), values);
            	    shouldResourcesAdd.put(values.get(1).toString(), false);/////////////////////
            	    //at1.setIs_primary(true);
            	    //at1.setType(StringPrimitive);
            	}
            	if (values.get(0).toString().equals("PrimitiveDataType")){
            		PrimitiveDataType pt1 = factory.createPrimitiveDataType();
            	    pt1.setName(values.get(1).toString());
            	    
            	    resourcesToAdd.put(values.get(1).toString(), pt1);
            	    resourcesListToAdd.put(values.get(1).toString(), values);
            	    shouldResourcesAdd.put(values.get(1).toString(), false);
            	    //at1.setIs_primary(true);
            	    //at1.setType(StringPrimitive);
            	}
            	if (values.get(0).toString().equals("Classifier")){
            		Classifier cl1 = factory.createClassifier();
            	    cl1.setName(values.get(1).toString());
            	    
            	    resourcesToAdd.put(values.get(1).toString(), cl1);
            	    resourcesListToAdd.put(values.get(1).toString(), values);
            	    shouldResourcesAdd.put(values.get(1).toString(), false);
            	    //at1.setIs_primary(true);
            	    //at1.setType(StringPrimitive);
            	}
            	               	
           
            System.out.println("Values = " + values + "n");
        }
	    for (Map.Entry<String, Object> entry : resourcesToAdd.entrySet()) {
    		//System.out.println("Key : " + entry.getKey() + " Value : "
    			//+ entry.getValue());
	    	     String topKey=entry.getKey();
	    	     
    		     Object obj=resourcesToAdd.get(topKey);
    		     List<Object> values=resourcesListToAdd.get(topKey);
    		     
    		     if(obj instanceof Class){
     		    	Class c1=(Class)obj;
     		    	if(values.size()>5){
     		    		if(values.get(5).toString().equals("")){
     		    			shouldResourcesAdd.put(topKey, true);	
     		    		}
     		    		else{
     		    			String fKey=values.get(5).toString();
     		    			Object objtoEdit=resourcesToAdd.get(fKey);
     		    			if(objtoEdit instanceof Class){
     		    				Class cEdit=(Class)objtoEdit;
     		    				if(values.get(6).toString().equals("parent")){
     		    					cEdit.setParent(c1);
     		    					resourcesToAdd.put(fKey, cEdit);
     		    					shouldResourcesAdd.put(topKey, true);
     		    				}
     		    			}
     		    			if(objtoEdit instanceof Association){
     		    				Association aEdit=(Association)objtoEdit;
     		    				if(values.get(6).toString().equals("src"))
     		    					aEdit.setSrc(c1);
     		    				if(values.get(6).toString().equals("dest"))
     		    					aEdit.setDest(c1);
     		    					
     		    				resourcesToAdd.put(fKey, aEdit);
     		    				shouldResourcesAdd.put(topKey, true);
     		    				
     		    			}
     		    		}     		    		
     		    	}
     		    	else{
     		    		shouldResourcesAdd.put(topKey, true);
     		    	}
     		    	
     		    }
    		     if(obj instanceof Association){
      		    	Association a1=(Association)obj;
      		    	shouldResourcesAdd.put(topKey, true);
      		    }
    		     if(obj instanceof Attribute){
       		    	Attribute at1=(Attribute)obj;
       		    	if(values.size()>5){
     		    		if(values.get(5).toString().equals("")){
     		    			shouldResourcesAdd.put(topKey, true);	
     		    		}
     		    		else{
     		    			String fKey=values.get(5).toString();
     		    			Object objtoEdit=resourcesToAdd.get(fKey);
     		    			if(objtoEdit instanceof Class){
     		    				Class cEdit=(Class)objtoEdit;
     		    				if(values.get(6).toString().equals("attrs")){
     		    					cEdit.getAttrs().add(at1);
     		    					resourcesToAdd.put(fKey, cEdit);
     		    					shouldResourcesAdd.put(fKey, true);
     		    					shouldResourcesAdd.put(topKey, false);
     		    				}
     		    			}
     		    			if(objtoEdit instanceof Attribute){
     		    				Attribute attEdit=(Attribute)objtoEdit;
     		    				if(values.get(6).toString().equals("type")){
     		    					Object j=resourcesToAdd.get(values.get(5).toString());
     		    					if(j instanceof Class)
     		    					attEdit.setType((Class)j);
     		    					if(j instanceof PrimitiveDataType)
         		    					attEdit.setType((PrimitiveDataType)j);
     		    					if(j instanceof Classifier)
         		    					attEdit.setType((Classifier)j);
     		    					
     		    					resourcesToAdd.put(fKey, attEdit);
     		    					shouldResourcesAdd.put(fKey, true);
     		    					shouldResourcesAdd.put(topKey, true);
     		    				}
     		    			}
     		    		}     		    		
     		    	}
     		    	else{
 /*    		    		if(values.size()>2){
         		    		if(values.get(2).toString().equals("")){
         		    			shouldResourcesAdd.put(topKey, true);	
         		    		}
         		    		else{
         		    			String fKey=values.get(2).toString();
         		    			Object objtoEdit=resourcesToAdd.get(fKey);
         		    			if(objtoEdit instanceof Attribute){
         		    				Attribute attEdit=(Attribute)objtoEdit;
         		    				if(values.get(3).toString().equals("type")){
         		    					Object j=resourcesToAdd.get(values.get(2));
         		    					if(j instanceof Classifier)
         		    					attEdit.setType((Classifier)j);
         		    					resourcesToAdd.put(fKey, attEdit);
         		    					shouldResourcesAdd.put(fKey, true);
         		    					shouldResourcesAdd.put(topKey, true);
         		    				}
         		    			}
         		    		}
         		    	}*/
     		    		
     		    		shouldResourcesAdd.put(topKey, false);
     		    		
     		    	}
       		    }
    		     if(obj instanceof PrimitiveDataType){
       		    	PrimitiveDataType pt1=(PrimitiveDataType)obj;
       		    	shouldResourcesAdd.put(topKey, true);
       		    }
    		     if(obj instanceof Classifier){
        		    	Classifier cl1=(Classifier)obj;
        		    	shouldResourcesAdd.put(topKey, true);
        		    }
    	}
	    
	    for (List<Object> values : QueryTuppleMap)  {
            	if (values.get(0).toString().equals("Attribute")){
            		Attribute at1 = (Attribute)resourcesToAdd.get(values.get(1).toString());
            	    if (values.get(3).toString().equals("type"))
            	    {
            	    	Object obj=resourcesToAdd.get(values.get(4).toString());
            	    	at1.setType((Classifier)obj);
            	    }

            	    resourcesToAdd.put(values.get(1).toString(), at1);
            	   // resourcesListToAdd.put(values.get(1).toString(), values);
            	    shouldResourcesAdd.put(values.get(1).toString(), true);
            	}
        }
	    
	    for (Map.Entry<String, Boolean> entry : shouldResourcesAdd.entrySet()) {
	    	System.out.println("Key : " + entry.getKey() + " Value : "
	    			+ entry.getValue());
	    	if ((Boolean)shouldResourcesAdd.get(entry.getKey())){
	    		EObject e=(EObject)resourcesToAdd.get(entry.getKey());
	    		resource.getContents().add(e);
	    	}
	    		
	    }
    		//System.out.println("Key : " + entry.getKey() + " Value : "
    			//+ entry.getValue());
	   // c1.getAttrs().add(a1);
	   // c1.getAttrs().add(a2);
	    

	    //resource.getContents().add(stringPrimitive);
	    //resource.getContents().add(integerPrimitive);
	    //resource.getContents().add(booleanPrimitive);
	    
	    System.out.println("XMI file at location :"+fileName+" is sucessfully created");
	    // now save the content.
	    try {
	      resource.save(Collections.EMPTY_MAP);
	    } catch (IOException e) {
	      // TODO Auto-generated catch block
	      e.printStackTrace();
	    }
  }
  public ArrayList<List<Object>> retrieveTupple(ArrayList<ClassifierTuple> queryVariables)
  {
		System.out.println("----------------------RESULT-----------------------");

        QueryTuppleMap=new ArrayList<List<Object>>();
		for (ClassifierTuple ct : queryVariables) {

			ArrayList<ClassifierValueTuple> cvts = ct.getObjectTuples();
			ArrayList<IPropertyTuple> propTup = ct.getValueTuples();
			for (ClassifierValueTuple cvt : cvts) {

				ArrayList<ValueTuple> vts = cvt.getAttributeValues();
				if(vts.size()==0)
				{
					Object Class = ct.getClassName(); // size of objects constraint
					Object obj = cvt.getObjectName();
					System.out.print(Class + " ");
					System.out.print(obj + " ");
					
					List<Object> objList = new ArrayList<Object>();
			        objList.add(Class);
			        objList.add(obj);
/*			        if(obj.toString().contains("-")){
			        	String org[]=obj.toString().split("-");
//						  System.out.println(org[0]+"------------"+org[1]+"------------"+org[2]);
						  objList.add(org[0]);
						  objList.add(org[2]);
			        }*/
					QueryTuppleMap.add(objList);
					System.out.println("\n");
				}
				for (ValueTuple vt : vts) {
					if (vt instanceof PrimitiveValueTuple) {
						Object val;
						if (propTup.contains(vt.getRelatedProperty())) {
							PrimitiveValueTuple ivt = (PrimitiveValueTuple) vt;
							if (ivt instanceof EnumerationValueTuple) {
								val = ((EnumerationLiteral) ivt.getValue())
										.getQualifiedName();
							} else {
								val = ivt.getValue();
							}
							Object attribute = ivt.getRelatedProperty()
									.getRoleeName();
							Object type = ivt.getRelatedProperty()
									.getType();
							Object obj = cvt.getObjectName();
							Object Class = ct.getClassName();// primitive type constraints

							System.out.print(Class + " ");
							System.out.print(obj + " ");
							System.out.print(type + " ");
							System.out.print(attribute + " ");
							System.out.print(val + " ");
							System.out.print("\n");
							
							List<Object> objList = new ArrayList<Object>();
					        objList.add(Class);
					        objList.add(obj);
					        objList.add(type);
					        objList.add(attribute);
					        objList.add(val);
					        if(obj.toString().contains("-")){
					        	String org[]=obj.toString().split("-");
//								  System.out.println(org[0]+"------------"+org[1]+"------------"+org[2]);
								  objList.add(org[0]);
								  objList.add(org[2]);
					        }
								  
					        QueryTuppleMap.add(objList);
						
						}
					} else {

						if (propTup.contains(vt.getRelatedProperty())) {
							ClassifierValueTuple ivt = (ClassifierValueTuple) vt;
							Object val = ivt.getObjectName();
							Object attribute = ivt.getRelatedProperty()
									.getRoleeName();
							Object type = ivt.getRelatedProperty()
									.getType();
							Object obj = cvt.getObjectName();
							Object Class = ct.getClassName();

							System.out.print(Class + " ");
							System.out.print(obj + " ");  // navigational constraints
							System.out.print(type + " ");
							System.out.print(attribute + " ");
							System.out.print(val + " ");
							System.out.print("\n");
							List<Object> objList = new ArrayList<Object>();
					        objList.add(Class);
					        objList.add(obj);
					        objList.add(type);
					        objList.add(attribute);
					        objList.add(val);
					        if(obj.toString().contains("-")){
					        	String org[]=obj.toString().split("-");
//								  System.out.println(org[0]+"------------"+org[1]+"------------"+org[2]);
								  objList.add(org[0]);
								  objList.add(org[2]);
					        }
					        QueryTuppleMap.add(objList);
						}
					}
				}
			}
			System.out.println();
			
		}
		return QueryTuppleMap;
	}
/*  public void reOrganizeTupple(){
	  int i=0;
	  for (List<Object> values : QueryTuppleMap)  {
		  if(values.get(1).toString().contains("-")){
			  String org[]=values.get(1).toString().split("-");
			  System.out.println(org[0]+"------------"+org[1]+"------------"+org[2]);
			  values.add(org[0]);
			  values.add(org[2]);
	          QueryTuppleMap.add(i, values);
		  }
		  i++;
	  }
  }*/
  
} 